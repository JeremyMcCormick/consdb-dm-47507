"""initial version

Revision ID: 71cb8cb12098
Revises: 
Create Date: 2024-05-20 06:50:59.333998+00:00

"""
from typing import Sequence, Union

import sqlalchemy as sa
from sqlalchemy.dialects import mysql, oracle

from alembic import op

# revision identifiers, used by Alembic.
revision: str = "71cb8cb12098"
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "ccdexposure_flexdata_schema",
        sa.Column(
            "key",
            sa.VARCHAR(length=128)
            .with_variant(mysql.VARCHAR(length=128), "mysql")
            .with_variant(oracle.VARCHAR2(length=128), "oracle")
            .with_variant(sa.VARCHAR(length=128), "postgresql"),
            nullable=False,
            comment="Name of key.",
        ),
        sa.Column(
            "dtype",
            sa.VARCHAR(length=64)
            .with_variant(mysql.VARCHAR(length=64), "mysql")
            .with_variant(oracle.VARCHAR2(length=64), "oracle")
            .with_variant(sa.VARCHAR(length=64), "postgresql"),
            nullable=False,
            comment="Name of the data type of the value, one of bool, int, float, str.",
        ),
        sa.Column(
            "doc",
            sa.TEXT()
            .with_variant(mysql.LONGTEXT(), "mysql")
            .with_variant(sa.CLOB(), "oracle")
            .with_variant(sa.TEXT(), "postgresql"),
            nullable=False,
            comment="Documentation string.",
        ),
        sa.Column(
            "unit",
            sa.VARCHAR(length=128)
            .with_variant(mysql.VARCHAR(length=128), "mysql")
            .with_variant(oracle.VARCHAR2(length=128), "oracle")
            .with_variant(sa.VARCHAR(length=128), "postgresql"),
            nullable=True,
            comment="Unit for the value. Should be from the IVOA (https://www.ivoa.net/documents/VOUnits/) or astropy.",
        ),
        sa.Column(
            "ucd",
            sa.VARCHAR(length=128)
            .with_variant(mysql.VARCHAR(length=128), "mysql")
            .with_variant(oracle.VARCHAR2(length=128), "oracle")
            .with_variant(sa.VARCHAR(length=128), "postgresql"),
            nullable=True,
            comment="IVOA Unified Content Descriptor (https://www.ivoa.net/documents/UCD1+/).",
        ),
        sa.PrimaryKeyConstraint("key"),
        schema="cdb_lsstcomcamsim",
    )
    op.create_table(
        "exposure",
        sa.Column(
            "exposure_id",
            sa.BIGINT()
            .with_variant(mysql.BIGINT(), "mysql")
            .with_variant(
                oracle.NUMBER(precision=38, scale=0, asdecimal=False), "oracle"
            )
            .with_variant(sa.BIGINT(), "postgresql"),
            nullable=False,
            comment="Unique identifier.",
        ),
        sa.Column(
            "exposure_name",
            sa.VARCHAR(length=20)
            .with_variant(mysql.VARCHAR(length=20), "mysql")
            .with_variant(oracle.VARCHAR2(length=20), "oracle")
            .with_variant(sa.VARCHAR(length=20), "postgresql"),
            nullable=False,
            comment="Official name of the exposure.",
        ),
        sa.Column(
            "controller",
            sa.VARCHAR(length=1)
            .with_variant(mysql.VARCHAR(length=1), "mysql")
            .with_variant(oracle.VARCHAR2(length=1), "oracle")
            .with_variant(sa.VARCHAR(length=1), "postgresql"),
            nullable=False,
            comment="The abbreviation of the controller used for the observation (O, C).",
        ),
        sa.Column(
            "day_obs",
            sa.INTEGER()
            .with_variant(mysql.INTEGER(), "mysql")
            .with_variant(sa.INTEGER(), "postgresql"),
            nullable=False,
            comment="Day of observation.",
        ),
        sa.Column(
            "seq_num",
            sa.INTEGER()
            .with_variant(mysql.INTEGER(), "mysql")
            .with_variant(sa.INTEGER(), "postgresql"),
            nullable=False,
            comment="Sequence number.",
        ),
        sa.Column(
            "physical_filter",
            sa.VARCHAR(length=32)
            .with_variant(mysql.VARCHAR(length=32), "mysql")
            .with_variant(oracle.VARCHAR2(length=32), "oracle")
            .with_variant(sa.VARCHAR(length=32), "postgresql"),
            nullable=True,
            comment="ID of physical filter, the filter associated with a particular instrument.",
        ),
        sa.Column(
            "band",
            sa.VARCHAR(length=32)
            .with_variant(mysql.VARCHAR(length=32), "mysql")
            .with_variant(oracle.VARCHAR2(length=32), "oracle")
            .with_variant(sa.VARCHAR(length=32), "postgresql"),
            nullable=True,
            comment="Name of the band used to take the exposure where this source was. measured. Abstract filter that is not associated with a particular instrument.",
        ),
        sa.Column(
            "s_ra",
            sa.DOUBLE()
            .with_variant(mysql.DOUBLE(asdecimal=True), "mysql")
            .with_variant(oracle.BINARY_DOUBLE(), "oracle")
            .with_variant(sa.DOUBLE_PRECISION(), "postgresql"),
            nullable=True,
            comment="Central Spatial Position in ICRS; Right ascension of targeted focal plane center.",
        ),
        sa.Column(
            "s_dec",
            sa.DOUBLE()
            .with_variant(mysql.DOUBLE(asdecimal=True), "mysql")
            .with_variant(oracle.BINARY_DOUBLE(), "oracle")
            .with_variant(sa.DOUBLE_PRECISION(), "postgresql"),
            nullable=True,
            comment="Central Spatial Position in ICRS; Declination of targeted focal plane center.",
        ),
        sa.Column(
            "sky_rotation",
            sa.DOUBLE()
            .with_variant(mysql.DOUBLE(asdecimal=True), "mysql")
            .with_variant(oracle.BINARY_DOUBLE(), "oracle")
            .with_variant(sa.DOUBLE_PRECISION(), "postgresql"),
            nullable=True,
            comment="Targeted sky rotation angle.",
        ),
        sa.Column(
            "azimuth_start",
            sa.DOUBLE()
            .with_variant(mysql.DOUBLE(asdecimal=True), "mysql")
            .with_variant(oracle.BINARY_DOUBLE(), "oracle")
            .with_variant(sa.DOUBLE_PRECISION(), "postgresql"),
            nullable=True,
            comment="Azimuth of focal plane center at the start of the exposure.",
        ),
        sa.Column(
            "azimuth_end",
            sa.DOUBLE()
            .with_variant(mysql.DOUBLE(asdecimal=True), "mysql")
            .with_variant(oracle.BINARY_DOUBLE(), "oracle")
            .with_variant(sa.DOUBLE_PRECISION(), "postgresql"),
            nullable=True,
            comment="Azimuth of focal plane center at the end of the exposure.",
        ),
        sa.Column(
            "azimuth",
            sa.DOUBLE()
            .with_variant(mysql.DOUBLE(asdecimal=True), "mysql")
            .with_variant(oracle.BINARY_DOUBLE(), "oracle")
            .with_variant(sa.DOUBLE_PRECISION(), "postgresql"),
            nullable=True,
            comment="Azimuth of focal plane center at the middle of the exposure.",
        ),
        sa.Column(
            "altitude_start",
            sa.DOUBLE()
            .with_variant(mysql.DOUBLE(asdecimal=True), "mysql")
            .with_variant(oracle.BINARY_DOUBLE(), "oracle")
            .with_variant(sa.DOUBLE_PRECISION(), "postgresql"),
            nullable=True,
            comment="Altitude of focal plane center at the start of the exposure.",
        ),
        sa.Column(
            "altitude_end",
            sa.DOUBLE()
            .with_variant(mysql.DOUBLE(asdecimal=True), "mysql")
            .with_variant(oracle.BINARY_DOUBLE(), "oracle")
            .with_variant(sa.DOUBLE_PRECISION(), "postgresql"),
            nullable=True,
            comment="Altitude of focal plane center at the end of the exposure.",
        ),
        sa.Column(
            "altitude",
            sa.DOUBLE()
            .with_variant(mysql.DOUBLE(asdecimal=True), "mysql")
            .with_variant(oracle.BINARY_DOUBLE(), "oracle")
            .with_variant(sa.DOUBLE_PRECISION(), "postgresql"),
            nullable=True,
            comment="Altitude of focal plane center at the middle of the exposure.",
        ),
        sa.Column(
            "zenith_distance_start",
            sa.DOUBLE()
            .with_variant(mysql.DOUBLE(asdecimal=True), "mysql")
            .with_variant(oracle.BINARY_DOUBLE(), "oracle")
            .with_variant(sa.DOUBLE_PRECISION(), "postgresql"),
            nullable=True,
            comment="Zenith distance at the start of the exposure.",
        ),
        sa.Column(
            "zenith_distance_end",
            sa.DOUBLE()
            .with_variant(mysql.DOUBLE(asdecimal=True), "mysql")
            .with_variant(oracle.BINARY_DOUBLE(), "oracle")
            .with_variant(sa.DOUBLE_PRECISION(), "postgresql"),
            nullable=True,
            comment="Zenith distance at the end of the exposure.",
        ),
        sa.Column(
            "zenith_distance",
            sa.DOUBLE()
            .with_variant(mysql.DOUBLE(asdecimal=True), "mysql")
            .with_variant(oracle.BINARY_DOUBLE(), "oracle")
            .with_variant(sa.DOUBLE_PRECISION(), "postgresql"),
            nullable=True,
            comment="Zenith distance at the middle of the exposure.",
        ),
        sa.Column(
            "airmass",
            sa.DOUBLE()
            .with_variant(mysql.DOUBLE(asdecimal=True), "mysql")
            .with_variant(oracle.BINARY_DOUBLE(), "oracle")
            .with_variant(sa.DOUBLE_PRECISION(), "postgresql"),
            nullable=True,
            comment="Airmass of the observed line of sight at the middle of the exposure.",
        ),
        sa.Column(
            "exp_midpt",
            sa.TIMESTAMP(),
            nullable=True,
            comment="Midpoint time for exposure at the fiducial center of the focal plane. array. TAI, accurate to 10ms.",
        ),
        sa.Column(
            "exp_midpt_mjd",
            sa.DOUBLE()
            .with_variant(mysql.DOUBLE(asdecimal=True), "mysql")
            .with_variant(oracle.BINARY_DOUBLE(), "oracle")
            .with_variant(sa.DOUBLE_PRECISION(), "postgresql"),
            nullable=True,
            comment="Midpoint time for exposure at the fiducial center of the focal plane. array in MJD. TAI, accurate to 10ms.",
        ),
        sa.Column(
            "obs_start",
            sa.TIMESTAMP(),
            nullable=True,
            comment="Start time of the exposure at the fiducial center of the focal plane. array, TAI, accurate to 10ms.",
        ),
        sa.Column(
            "obs_start_mjd",
            sa.DOUBLE()
            .with_variant(mysql.DOUBLE(asdecimal=True), "mysql")
            .with_variant(oracle.BINARY_DOUBLE(), "oracle")
            .with_variant(sa.DOUBLE_PRECISION(), "postgresql"),
            nullable=True,
            comment="Start of the exposure in MJD, TAI, accurate to 10ms.",
        ),
        sa.Column(
            "obs_end",
            sa.TIMESTAMP(),
            nullable=True,
            comment="End time of the exposure at the fiducial center of the focal plane. array, TAI, accurate to 10ms.",
        ),
        sa.Column(
            "obs_end_mjd",
            sa.DOUBLE()
            .with_variant(mysql.DOUBLE(asdecimal=True), "mysql")
            .with_variant(oracle.BINARY_DOUBLE(), "oracle")
            .with_variant(sa.DOUBLE_PRECISION(), "postgresql"),
            nullable=True,
            comment="End of the exposure in MJD, TAI, accurate to 10ms.",
        ),
        sa.Column(
            "exp_time",
            sa.DOUBLE()
            .with_variant(mysql.DOUBLE(asdecimal=True), "mysql")
            .with_variant(oracle.BINARY_DOUBLE(), "oracle")
            .with_variant(sa.DOUBLE_PRECISION(), "postgresql"),
            nullable=True,
            comment="Spatially-averaged duration of exposure, accurate to 10ms.",
        ),
        sa.Column(
            "shut_time",
            sa.DOUBLE()
            .with_variant(mysql.DOUBLE(asdecimal=True), "mysql")
            .with_variant(oracle.BINARY_DOUBLE(), "oracle")
            .with_variant(sa.DOUBLE_PRECISION(), "postgresql"),
            nullable=True,
            comment="Spatially-averaged shutter-open duration, accurate to 10ms.",
        ),
        sa.Column(
            "dark_time",
            sa.DOUBLE()
            .with_variant(mysql.DOUBLE(asdecimal=True), "mysql")
            .with_variant(oracle.BINARY_DOUBLE(), "oracle")
            .with_variant(sa.DOUBLE_PRECISION(), "postgresql"),
            nullable=True,
            comment="Duration from last clear to readout, accurate to 10ms.",
        ),
        sa.Column(
            "group_id",
            sa.VARCHAR(length=64)
            .with_variant(mysql.VARCHAR(length=64), "mysql")
            .with_variant(oracle.VARCHAR2(length=64), "oracle")
            .with_variant(sa.VARCHAR(length=64), "postgresql"),
            nullable=True,
            comment="Identifier for the group that this exposure is part of.",
        ),
        sa.Column(
            "cur_index",
            sa.INTEGER()
            .with_variant(mysql.INTEGER(), "mysql")
            .with_variant(sa.INTEGER(), "postgresql"),
            nullable=True,
            comment="Number (1-based) of the observation within its group.",
        ),
        sa.Column(
            "max_index",
            sa.INTEGER()
            .with_variant(mysql.INTEGER(), "mysql")
            .with_variant(sa.INTEGER(), "postgresql"),
            nullable=True,
            comment="Expected number of observations within the group.",
        ),
        sa.Column(
            "img_type",
            sa.VARCHAR(length=64)
            .with_variant(mysql.VARCHAR(length=64), "mysql")
            .with_variant(oracle.VARCHAR2(length=64), "oracle")
            .with_variant(sa.VARCHAR(length=64), "postgresql"),
            nullable=True,
            comment="Type of exposure taken.",
        ),
        sa.Column(
            "emulated",
            sa.BOOLEAN(),
            nullable=True,
            comment="True if the exposure was taken in emulation mode.",
        ),
        sa.Column(
            "science_program",
            sa.VARCHAR(length=64)
            .with_variant(mysql.VARCHAR(length=64), "mysql")
            .with_variant(oracle.VARCHAR2(length=64), "oracle")
            .with_variant(sa.VARCHAR(length=64), "postgresql"),
            nullable=True,
            comment="Science program.",
        ),
        sa.Column(
            "observation_reason",
            sa.VARCHAR(length=68)
            .with_variant(mysql.VARCHAR(length=68), "mysql")
            .with_variant(oracle.VARCHAR2(length=68), "oracle")
            .with_variant(sa.VARCHAR(length=68), "postgresql"),
            nullable=True,
            comment="Reason for the observation.",
        ),
        sa.Column(
            "target_name",
            sa.VARCHAR(length=64)
            .with_variant(mysql.VARCHAR(length=64), "mysql")
            .with_variant(oracle.VARCHAR2(length=64), "oracle")
            .with_variant(sa.VARCHAR(length=64), "postgresql"),
            nullable=True,
            comment="Target of the observation.",
        ),
        sa.Column(
            "air_temp",
            sa.FLOAT()
            .with_variant(mysql.FLOAT(), "mysql")
            .with_variant(oracle.BINARY_FLOAT(), "oracle")
            .with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="Outside air temperature in degC.",
        ),
        sa.Column(
            "pressure",
            sa.FLOAT()
            .with_variant(mysql.FLOAT(), "mysql")
            .with_variant(oracle.BINARY_FLOAT(), "oracle")
            .with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="Outside air pressure.",
        ),
        sa.Column(
            "humidity",
            sa.FLOAT()
            .with_variant(mysql.FLOAT(), "mysql")
            .with_variant(oracle.BINARY_FLOAT(), "oracle")
            .with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="Outside relative humidity.",
        ),
        sa.Column(
            "wind_speed",
            sa.FLOAT()
            .with_variant(mysql.FLOAT(), "mysql")
            .with_variant(oracle.BINARY_FLOAT(), "oracle")
            .with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="Outside wind speed.",
        ),
        sa.Column(
            "wind_dir",
            sa.FLOAT()
            .with_variant(mysql.FLOAT(), "mysql")
            .with_variant(oracle.BINARY_FLOAT(), "oracle")
            .with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="Wind direction.",
        ),
        sa.Column(
            "dimm_seeing",
            sa.FLOAT()
            .with_variant(mysql.FLOAT(), "mysql")
            .with_variant(oracle.BINARY_FLOAT(), "oracle")
            .with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="Seeing as measured by external DIMM (FWHM).",
        ),
        sa.Column(
            "focus_z",
            sa.FLOAT()
            .with_variant(mysql.FLOAT(), "mysql")
            .with_variant(oracle.BINARY_FLOAT(), "oracle")
            .with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="Focus Z position.",
        ),
        sa.Column(
            "simulated",
            sa.BOOLEAN(),
            nullable=True,
            comment="Were any control system components simulated?",
        ),
        sa.Column(
            "s_region",
            sa.VARCHAR(length=1024)
            .with_variant(mysql.VARCHAR(length=1024), "mysql")
            .with_variant(oracle.VARCHAR2(length=1024), "oracle")
            .with_variant(sa.VARCHAR(length=1024), "postgresql"),
            nullable=True,
            comment="Sky region in STC-S format (https://www.ivoa.net/documents/STC-S/20130917/index.html).",
        ),
        sa.PrimaryKeyConstraint("exposure_id"),
        sa.UniqueConstraint("day_obs", "seq_num", name="un_day_obs_seq_num"),
        schema="cdb_lsstcomcamsim",
    )
    op.create_table(
        "exposure_flexdata_schema",
        sa.Column(
            "key",
            sa.VARCHAR(length=128)
            .with_variant(mysql.VARCHAR(length=128), "mysql")
            .with_variant(oracle.VARCHAR2(length=128), "oracle")
            .with_variant(sa.VARCHAR(length=128), "postgresql"),
            nullable=False,
            comment="Name of key.",
        ),
        sa.Column(
            "dtype",
            sa.VARCHAR(length=64)
            .with_variant(mysql.VARCHAR(length=64), "mysql")
            .with_variant(oracle.VARCHAR2(length=64), "oracle")
            .with_variant(sa.VARCHAR(length=64), "postgresql"),
            nullable=False,
            comment="Name of the data type of the value, one of bool, int, float, str.",
        ),
        sa.Column(
            "doc",
            sa.TEXT()
            .with_variant(mysql.LONGTEXT(), "mysql")
            .with_variant(sa.CLOB(), "oracle")
            .with_variant(sa.TEXT(), "postgresql"),
            nullable=False,
            comment="Documentation string.",
        ),
        sa.Column(
            "unit",
            sa.VARCHAR(length=128)
            .with_variant(mysql.VARCHAR(length=128), "mysql")
            .with_variant(oracle.VARCHAR2(length=128), "oracle")
            .with_variant(sa.VARCHAR(length=128), "postgresql"),
            nullable=True,
            comment="Unit for the value. Should be from the IVOA (https://www.ivoa.net/documents/VOUnits/) or astropy.",
        ),
        sa.Column(
            "ucd",
            sa.VARCHAR(length=128)
            .with_variant(mysql.VARCHAR(length=128), "mysql")
            .with_variant(oracle.VARCHAR2(length=128), "oracle")
            .with_variant(sa.VARCHAR(length=128), "postgresql"),
            nullable=True,
            comment="IVOA Unified Content Descriptor (https://www.ivoa.net/documents/UCD1+/).",
        ),
        sa.PrimaryKeyConstraint("key"),
        schema="cdb_lsstcomcamsim",
    )
    op.create_table(
        "ccdexposure",
        sa.Column(
            "ccdexposure_id",
            sa.BIGINT()
            .with_variant(mysql.BIGINT(), "mysql")
            .with_variant(
                oracle.NUMBER(precision=38, scale=0, asdecimal=False), "oracle"
            )
            .with_variant(sa.BIGINT(), "postgresql"),
            nullable=False,
            comment="Unique identifier.",
        ),
        sa.Column(
            "exposure_id",
            sa.BIGINT()
            .with_variant(mysql.BIGINT(), "mysql")
            .with_variant(
                oracle.NUMBER(precision=38, scale=0, asdecimal=False), "oracle"
            )
            .with_variant(sa.BIGINT(), "postgresql"),
            nullable=False,
            comment="Identifier of the exposure.",
        ),
        sa.Column(
            "detector",
            sa.INTEGER()
            .with_variant(mysql.INTEGER(), "mysql")
            .with_variant(sa.INTEGER(), "postgresql"),
            nullable=False,
            comment="Number of the detector in the focal plane.",
        ),
        sa.Column(
            "s_region",
            sa.VARCHAR(length=1024)
            .with_variant(mysql.VARCHAR(length=1024), "mysql")
            .with_variant(oracle.VARCHAR2(length=1024), "oracle")
            .with_variant(sa.VARCHAR(length=1024), "postgresql"),
            nullable=True,
            comment="Sky region in STC-S format (https://www.ivoa.net/documents/STC-S/20130917/index.html).",
        ),
        sa.ForeignKeyConstraint(
            ["exposure_id"],
            ["cdb_lsstcomcamsim.exposure.exposure_id"],
            name="fk_exposure_id",
        ),
        sa.PrimaryKeyConstraint("ccdexposure_id"),
        sa.UniqueConstraint("exposure_id", "detector", name="un_exposure_id_detector"),
        schema="cdb_lsstcomcamsim",
    )
    op.create_table(
        "exposure_flexdata",
        sa.Column(
            "obs_id",
            sa.BIGINT()
            .with_variant(mysql.BIGINT(), "mysql")
            .with_variant(
                oracle.NUMBER(precision=38, scale=0, asdecimal=False), "oracle"
            )
            .with_variant(sa.BIGINT(), "postgresql"),
            nullable=False,
            comment="Unique identifier.",
        ),
        sa.Column(
            "key",
            sa.VARCHAR(length=128)
            .with_variant(mysql.VARCHAR(length=128), "mysql")
            .with_variant(oracle.VARCHAR2(length=128), "oracle")
            .with_variant(sa.VARCHAR(length=128), "postgresql"),
            nullable=False,
            comment="Name of key.",
        ),
        sa.Column(
            "value",
            sa.TEXT()
            .with_variant(mysql.LONGTEXT(), "mysql")
            .with_variant(sa.CLOB(), "oracle")
            .with_variant(sa.TEXT(), "postgresql"),
            nullable=True,
            comment="Content of value as a string.",
        ),
        sa.ForeignKeyConstraint(
            ["key"], ["cdb_lsstcomcamsim.exposure_flexdata_schema.key"], name="fk_key"
        ),
        sa.ForeignKeyConstraint(
            ["obs_id"], ["cdb_lsstcomcamsim.exposure.exposure_id"], name="fk_obs_id"
        ),
        sa.PrimaryKeyConstraint("obs_id", "key"),
        schema="cdb_lsstcomcamsim",
    )
    op.create_table(
        "ccdexposure_camera",
        sa.Column(
            "ccdexposure_id",
            sa.BIGINT()
            .with_variant(mysql.BIGINT(), "mysql")
            .with_variant(
                oracle.NUMBER(precision=38, scale=0, asdecimal=False), "oracle"
            )
            .with_variant(sa.BIGINT(), "postgresql"),
            nullable=False,
            comment="Unique identifier.",
        ),
        sa.Column(
            "temp_set",
            sa.FLOAT()
            .with_variant(mysql.FLOAT(), "mysql")
            .with_variant(oracle.BINARY_FLOAT(), "oracle")
            .with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="Temperature setpoint of CCD in degC.",
        ),
        sa.Column(
            "ccd_temp",
            sa.FLOAT()
            .with_variant(mysql.FLOAT(), "mysql")
            .with_variant(oracle.BINARY_FLOAT(), "oracle")
            .with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="Temperature of CCD in degC.",
        ),
        sa.ForeignKeyConstraint(
            ["ccdexposure_id"],
            ["cdb_lsstcomcamsim.ccdexposure.ccdexposure_id"],
            name="fk_ccdexposure_id",
        ),
        sa.PrimaryKeyConstraint("ccdexposure_id"),
        schema="cdb_lsstcomcamsim",
    )
    op.create_table(
        "ccdexposure_flexdata",
        sa.Column(
            "obs_id",
            sa.BIGINT()
            .with_variant(mysql.BIGINT(), "mysql")
            .with_variant(
                oracle.NUMBER(precision=38, scale=0, asdecimal=False), "oracle"
            )
            .with_variant(sa.BIGINT(), "postgresql"),
            nullable=False,
            comment="Unique identifier.",
        ),
        sa.Column(
            "key",
            sa.VARCHAR(length=128)
            .with_variant(mysql.VARCHAR(length=128), "mysql")
            .with_variant(oracle.VARCHAR2(length=128), "oracle")
            .with_variant(sa.VARCHAR(length=128), "postgresql"),
            nullable=False,
            comment="Name of key.",
        ),
        sa.Column(
            "value",
            sa.TEXT()
            .with_variant(mysql.LONGTEXT(), "mysql")
            .with_variant(sa.CLOB(), "oracle")
            .with_variant(sa.TEXT(), "postgresql"),
            nullable=True,
            comment="Content of value as a string.",
        ),
        sa.ForeignKeyConstraint(
            ["key"],
            ["cdb_lsstcomcamsim.ccdexposure_flexdata_schema.key"],
            name="fk_key",
        ),
        sa.ForeignKeyConstraint(
            ["obs_id"],
            ["cdb_lsstcomcamsim.ccdexposure.ccdexposure_id"],
            name="fk_obs_id",
        ),
        sa.PrimaryKeyConstraint("obs_id", "key"),
        schema="cdb_lsstcomcamsim",
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # drop tables removed for safety
    pass
    # ### end Alembic commands ###
