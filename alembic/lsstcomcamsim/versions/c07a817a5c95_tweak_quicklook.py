"""tweak quicklook

Revision ID: c07a817a5c95
Revises: 6d5561651761
Create Date: 2024-06-18 10:02:09.572578+00:00

"""

from typing import Sequence, Union

import sqlalchemy as sa
from sqlalchemy.dialects import mysql, oracle

from alembic import op

# revision identifiers, used by Alembic.
revision: str = "c07a817a5c95"
down_revision: Union[str, None] = "6d5561651761"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column(
        "ccdvisit1_quicklook",
        sa.Column(
            "eff_time",
            sa.FLOAT()
            .with_variant(mysql.FLOAT(), "mysql")
            .with_variant(oracle.BINARY_FLOAT(), "oracle")
            .with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="Effective exposure time.",
        ),
        schema="cdb_lsstcomcamsim",
    )
    op.add_column(
        "ccdvisit1_quicklook",
        sa.Column(
            "eff_time_psf_sigma_scale",
            sa.FLOAT()
            .with_variant(mysql.FLOAT(), "mysql")
            .with_variant(oracle.BINARY_FLOAT(), "oracle")
            .with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="Effective exposure time, PSF sigma scale.",
        ),
        schema="cdb_lsstcomcamsim",
    )
    op.add_column(
        "ccdvisit1_quicklook",
        sa.Column(
            "eff_time_psf_sky_bg_scale",
            sa.FLOAT()
            .with_variant(mysql.FLOAT(), "mysql")
            .with_variant(oracle.BINARY_FLOAT(), "oracle")
            .with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="Effective exposure time, sky backgroundscale.",
        ),
        schema="cdb_lsstcomcamsim",
    )
    op.add_column(
        "ccdvisit1_quicklook",
        sa.Column(
            "eff_time_psf_zero_point_scale",
            sa.FLOAT()
            .with_variant(mysql.FLOAT(), "mysql")
            .with_variant(oracle.BINARY_FLOAT(), "oracle")
            .with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="Effective exposure time, zero point scale.",
        ),
        schema="cdb_lsstcomcamsim",
    )
    op.add_column(
        "ccdvisit1_quicklook",
        sa.Column(
            "psf_area",
            sa.FLOAT()
            .with_variant(mysql.FLOAT(), "mysql")
            .with_variant(oracle.BINARY_FLOAT(), "oracle")
            .with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="PSF area.",
        ),
        schema="cdb_lsstcomcamsim",
    )
    op.add_column(
        "ccdvisit1_quicklook",
        sa.Column(
            "psf_ixx",
            sa.FLOAT()
            .with_variant(mysql.FLOAT(), "mysql")
            .with_variant(oracle.BINARY_FLOAT(), "oracle")
            .with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="PSF Ixx moment.",
        ),
        schema="cdb_lsstcomcamsim",
    )
    op.add_column(
        "ccdvisit1_quicklook",
        sa.Column(
            "psf_ixy",
            sa.FLOAT()
            .with_variant(mysql.FLOAT(), "mysql")
            .with_variant(oracle.BINARY_FLOAT(), "oracle")
            .with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="PSF Ixy moment.",
        ),
        schema="cdb_lsstcomcamsim",
    )
    op.add_column(
        "ccdvisit1_quicklook",
        sa.Column(
            "psf_iyy",
            sa.FLOAT()
            .with_variant(mysql.FLOAT(), "mysql")
            .with_variant(oracle.BINARY_FLOAT(), "oracle")
            .with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="PSF Iyy moment.",
        ),
        schema="cdb_lsstcomcamsim",
    )
    op.add_column(
        "visit1_quicklook",
        sa.Column(
            "n_inputs",
            sa.INTEGER().with_variant(mysql.INTEGER(), "mysql").with_variant(sa.INTEGER(), "postgresql"),
            nullable=True,
            comment="Number of CCDs used to compute the visit aggregates.",
        ),
        schema="cdb_lsstcomcamsim",
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column("visit1_quicklook", "n_inputs", schema="cdb_lsstcomcamsim")
    op.drop_column("ccdvisit1_quicklook", "psf_iyy", schema="cdb_lsstcomcamsim")
    op.drop_column("ccdvisit1_quicklook", "psf_ixy", schema="cdb_lsstcomcamsim")
    op.drop_column("ccdvisit1_quicklook", "psf_ixx", schema="cdb_lsstcomcamsim")
    op.drop_column("ccdvisit1_quicklook", "psf_area", schema="cdb_lsstcomcamsim")
    op.drop_column("ccdvisit1_quicklook", "eff_time_psf_zero_point_scale", schema="cdb_lsstcomcamsim")
    op.drop_column("ccdvisit1_quicklook", "eff_time_psf_sky_bg_scale", schema="cdb_lsstcomcamsim")
    op.drop_column("ccdvisit1_quicklook", "eff_time_psf_sigma_scale", schema="cdb_lsstcomcamsim")
    op.drop_column("ccdvisit1_quicklook", "eff_time", schema="cdb_lsstcomcamsim")
    # ### end Alembic commands ###
